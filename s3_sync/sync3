#!/usr/local/bin/python3
# https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-uploading-files.html
import logging
import boto3
from botocore.exceptions import ClientError
import os

def switch_role(env, file_name, object_name=None):
    sts_client = boto3.client('sts')

    if object_name is None:
        object_name = os.path.basename(file_name)    

    # switch between preprod and prod ARN and a role session name.
    if env == "preprod":
        assumed_role_object=sts_client.assume_role(
    # Must update Trusted relationship with KDP account RoleArn="arn:aws:iam::360915197767:role/dev-preprod-eks-ue1-1-eks-workers"
    # cep-s3-saltmaster-init-sync role was created manually in pre-prod and prod accounts
            RoleArn="arn:aws:iam::360915197767:role/cep-s3-saltmaster-init-sync",
            RoleSessionName="AssumePreProdRole"
        )
        credentials=assumed_role_object['Credentials']
#        s3_resource=boto3.resource(
#            's3',
#            aws_access_key_id=credentials['AccessKeyId'],
#            aws_secret_access_key=credentials['SecretAccessKey'],
#            aws_session_token=credentials['SessionToken'],
#        )
        s3_client = boto3.client(
            's3',
            aws_access_key_id=credentials['AccessKeyId'],
            aws_secret_access_key=credentials['SecretAccessKey'],
            aws_session_token=credentials['SessionToken'],
        )

#        for bucket in s3_resource.buckets.all():
            #check bucket names
            #print(bucket.name)
        for bucket in ('hgaw-vmop', 'hgaw-vmop-east2', 'cep-saltmaster-init'):
#            if bucket.name == "hgaw-vmop":
                try:
                    response = s3_client.upload_file(file_name, bucket.name, object_name=None)
                except ClientError as e:
                    logging.error(e)
                    return False
                return True
                s3_client.upload_file('saltmaster_init.tpl', bucket.name)
                print("sync to hgaw-vmop complete")
            elif bucket.name == "hgaw-vmop-east2":
                try:
                    response = s3_client.upload_file(file_name, bucket.name, object_name=None)
                except ClientError as e:
                    logging.error(e)
                    return False
                return True
                s3_client.upload_file('saltmaster_init.tpl', bucket.name)
                print("sync to hgaw-vmop-east2 complete")
            elif bucket.name == "cep-saltmaster-init":
                try:
                    response = s3_client.upload_file(file_name, bucket.name, object_name=None)
                except ClientError as e:
                    logging.error(e)
                    return False
                return True
                s3_client.upload_file('saltmaster_init.tpl', bucket.name)
                print("sync to cep-saltmaster-init complete")
            else:
                print("No matching bucket names")
    elif env == "prod":
        assumed_role_object=sts_client.assume_role(
            RoleArn="arn:aws:iam::360915197767:role/cep-s3-saltmaster-init-sync",
            RoleSessionName="AssumeProdRole"
        )
        credentials=assumed_role_object['Credentials']
        s3_resource=boto3.resource(
            's3',
            aws_access_key_id=credentials['AccessKeyId'],
            aws_secret_access_key=credentials['SecretAccessKey'],
            aws_session_token=credentials['SessionToken'],
        )
        s3_client = boto3.client(
            's3',
            aws_access_key_id=credentials['AccessKeyId'],
            aws_secret_access_key=credentials['SecretAccessKey'],
            aws_session_token=credentials['SessionToken'],
        )
        for bucket in s3_resource.buckets.all():
            if bucket.name == "cep-vmop-east-1":
                try:
                    response = s3_client.upload_file(file_name, bucket.name, object_name=None)
                except ClientError as e:
                    logging.error(e)
                    return False
                return True
                s3_client.upload_file('saltmaster_init.tpl', bucket.name)
                print("sync to cep-vmop-east-1 complete")
            elif bucket.name == "cep-vmop-east-2":
                try:
                    response = s3_client.upload_file(file_name, bucket.name, object_name=None)
                except ClientError as e:
                    logging.error(e)
                    return False
                return True
                s3_client.upload_file('saltmaster_init.tpl', bucket.name)
                print("sync to cep-vmop-east-2 complete")
            elif bucket.name == "cep-saltmaster-init2":
                try:
                    response = s3_client.upload_file(file_name, bucket.name, object_name=None)
                except ClientError as e:
                    logging.error(e)
                    return False
                return True
                s3_client.upload_file('saltmaster_init.tpl', bucket.name)
                print("sync to cep-saltmaster-init2 complete")
            elif bucket.name == "cep-vmop-eucentral1":
                try:
                    response = s3_client.upload_file(file_name, bucket.name, object_name=None)
                except ClientError as e:
                    logging.error(e)
                    return False
                return True
                s3_client.upload_file('saltmaster_init.tpl', bucket.name)
                print("sync to cep-vmop-eucentral1 complete")
            else:
                print("No matching bucket names")
    else:
        print("Enter either preprod or prod")


#def upload_file(file_name, bucket, object_name=None):
#
#    if object_name is None:
#        object_name = os.path.basename(file_name)
#
#    # Upload file up to s3 buckets in dev3
#    s3_client = boto3.client(
#            's3',
#            aws_access_key_id=credentials['AccessKeyId'],
#            aws_secret_access_key=credentials['SecretAccessKey'],
#            aws_session_token=credentials['SessionToken'],
#            )
#    try:
#        response = s3_client.upload_file(file_name, bucket, object_name)
#    except ClientError as e:
#        logging.error(e)
#        return False
#    return True

env="preprod"
file_name="saltmaster_init.tpl"
switch_role(env,file_name,object_name=None)
